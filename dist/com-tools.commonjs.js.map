{"version":3,"sources":["webpack://comTools/webpack/bootstrap","webpack://comTools/external \"es-expand\"","webpack://comTools/./src/ByURL.js","webpack://comTools/./src/ByURLSearchParams.js","webpack://comTools/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ByURL","initUrl","paramsPropParse","paramsPropStringify","url","origin","host","pathname","pathList","search","searchParams","hash","hashSearch","hashParams","hashUrlUtils","addSearchParams","addHashParams","this","util","deleUtils","deleUrlUtilsMap","forEach","deleKey","urlUtils","undefined","assign","_deleUrlUtilsFor","newValue","_urlUtils","_initUrl","parseUrl","stringifyUrl","protocol","hostname","port","absPath","params","_paramsPropJSONParse","JSON","correctParse","_paramsPropJSONStringify","stringify","urlStr","hostRegExp","href","trim","splitURLByQueryString","hostUrl","protoList","split","length","hostList","hostItem0","test","slice","hostRegRes","match","join","parseQueryString","replace","keys","reduce","total","hrefUrlUtils","mergedSearchParams","excludeParams","excludeKeys","filterProperty","includes","noKeys","addSearch","queryStringify","addHashSearch","preIndex","indexOf","anrIndex","urlQS","substring","JSONQueryStringify","obj","queryPrefix","parseJSONQueryString","queryString","parseJSONQueryStrObjProperty","queryObj","entries","kvList","decodeURIComponent","arguments","paramList","map","kvArr","index","array","keyStr","encodeURIComponent","kvStr","similarQueryStringify","separOpts","propSeparator","prop","kvSeparator","kv","parseSimilarQueryString","objectPropertyDescriptors","toJSONqueryStringify","defineProperties","stringPropertyDescriptors","urlJSONQueryObj","String","ByURLSearchParams","initSearch","paramsPropReplacer","callback","thisArg","apply","values","_initSearch","_params","isEqualOfJSON","value1","value2","multipleLoop","loopCall","complete","stepComplete","thisValue","Number","POSITIVE_INFINITY","step","delay","stepCount","stop","setStop","loop","needLoop","timeoutId","atuoSingleLoop","singleTotal","Math","min","setTimeout","stopInfo","clearTimeout","arrayPropertyDescriptors","loopOpt","safelyIterate","iterable","operation","arrayCopy","push","filter","currentValue","currentIndex","getTypeOf","inst","typeInfo","constructor","getTypeStringOf","typeStr","defineListenableProperty","options","ready","readyName","noEvent","event","eventName","newValueKey","oldValueKey","getDefault","priReadyName","priProp","configurable","_this","window","propValue","Promise","resolve","createControllablePromise","set","propGetter","propSetter","httpReady","oldValue","change","Event","dispatchEvent","defineListenableProperties","props","propsObj","Array","isArray","propName","propOpts","defineListenablePropertyGetter","asGetter","createUniqueIdentifier","Date","getTime","toString","random","executor","statusCompletesImmediately","executorIsvalid","oriFuns","clearAdditions","caPromise","reject","resolveFun","rejectFun","reason"],"mappings":"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","file":"com-tools.commonjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"es-expand\");","//ByURL：开始\n\n/**\n * 该类是用于在不支持 URL 类型的环境下替代 URL 的；但该类的提供的功能和接口远丰富于 URL ，但并不完全包含于 URL ，所以，完全替换 URL\n */\nexport class ByURL {\n\n  deleUrlUtilsMap = {\n    url:[\"origin\",\"protocol\",\"host\",\"hostname\",\"port\",\"pathname\",\"pathList\",\"absPath\"],\n    origin:[\"protocol\",\"host\",\"hostname\",\"port\"],\n    host:[\"hostname\",\"port\"],\n    pathname:[\"pathList\",\"absPath\"],\n    pathList:[\"pathname\",\"absPath\"],\n    search:[\"searchParams\",\"params\"],\n    searchParams:[\"search\",\"params\"],\n    hash:[\"hashSearch\",\"hashParams\",\"hashUrlUtils\",\"params\"],\n    hashSearch:[\"hashParams\",\"params\"],\n    hashParams:[\"hashSearch\",\"params\"],\n    hashUrlUtils:[\"hash\",\"hashSearch\",\"hashParams\",\"params\"],\n    addSearchParams:[\"addSearch\"],\n    addHashParams:[\"addHashSearch\"]\n  };\n\n  /**\n   * paramsPropParse  : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，否则，原样输出；\n   */\n  paramsPropParse;\n\n  /**\n   * paramsPropStringify : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n   */\n  paramsPropStringify;\n\n  /**\n   *\n   * @param initUrl : UrlUtils | string    必选；\n   * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n   * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n   */\n  constructor(initUrl,paramsPropParse,paramsPropStringify){\n    this.paramsPropParse = paramsPropParse;\n    this.paramsPropStringify = paramsPropStringify;\n    this.initUrl = initUrl;\n  }\n\n  /**\n   * urlUtils 包含解析后的所有url组件的对象\n   */\n  set urlUtils(newValue){\n      this._urlUtils = newValue;\n  }\n\n  get urlUtils(){\n    if (!this._urlUtils) {\n      this._urlUtils = {};\n    }\n    return this._urlUtils;\n  }\n\n\n  /**\n   * 原始输入的 url\n   * @param newValue\n   */\n  set initUrl(newValue){\n    this._initUrl = newValue;\n    if (newValue){\n      var urlUtils = newValue;\n      if (typeof newValue != \"object\"){\n        urlUtils = parseUrl(newValue,this.paramsPropParse,this.paramsPropStringify);\n      }\n      this.urlUtils = urlUtils;\n    }\n  }\n\n  get initUrl(){\n    return this._initUrl;\n  }\n\n\n\n  get href(){\n    return stringifyUrl(this.urlUtils,this.paramsPropStringify,this.paramsPropParse);\n  }\n  set href(newValue){\n    this.initUrl = newValue;\n  }\n\n\n  get url(){\n    return this.urlUtils.url;\n  }\n  set url(newValue){\n    this._deleUrlUtilsFor(\"url\");\n    this.urlUtils.url = newValue;\n  }\n\n\n\n  get origin(){\n    return this.urlUtils.origin;\n  }\n  set origin(newValue){\n    this._deleUrlUtilsFor(\"origin\");\n    this.urlUtils.origin = origin;\n  }\n\n\n  get protocol(){\n    return this.urlUtils.protocol;\n  }\n  set protocol(newValue){\n    this._deleUrlUtilsFor(\"protocol\");\n    this.urlUtils.protocol = newValue;\n  }\n\n\n\n  get host(){\n    return this.urlUtils.host;\n  }\n  set host(newValue){\n    this._deleUrlUtilsFor(\"host\");\n    this.urlUtils.host = newValue;\n  }\n\n\n\n  get hostname(){\n    return this.urlUtils.hostname;\n  }\n  set hostname(newValue){\n    this._deleUrlUtilsFor(\"hostname\");\n    this.urlUtils.hostname = newValue;\n  }\n\n\n\n  get port(){\n    return this.urlUtils.port;\n  }\n  set port(newValue){\n    this._deleUrlUtilsFor(\"port\");\n    this.urlUtils.port = newValue;\n  }\n\n\n  get pathname(){\n    return this.urlUtils.pathname;\n  }\n  set pathname(newValue){\n    this._deleUrlUtilsFor(\"pathname\");\n    this.urlUtils.pathname = newValue;\n  }\n\n\n\n  get pathList(){\n    return this.urlUtils.pathList;\n  }\n  set pathList(newValue){\n    this._deleUrlUtilsFor(\"pathList\");\n    this.urlUtils.pathList = newValue;\n  }\n\n\n  get absPath(){\n    return this.urlUtils.absPath;\n  }\n\n\n\n  get search(){\n    return this.urlUtils.search;\n  }\n  set search(newValue){\n    this._deleUrlUtilsFor(\"search\");\n    this.urlUtils.search = newValue;\n  }\n\n\n\n  get searchParams(){\n    return this.urlUtils.search;\n  }\n  set searchParams(newValue){\n    this._deleUrlUtilsFor(\"searchParams\");\n    this.urlUtils.searchParams = newValue;\n  }\n\n\n\n  get hash(){\n    return this.urlUtils.hash;\n  }\n  set hash(newValue){\n    this._deleUrlUtilsFor(\"hash\");\n    this.urlUtils.hash = newValue;\n  }\n\n\n\n  get hashSearch(){\n    return this.urlUtils.hashSearch;\n  }\n  set hashSearch(newValue){\n    this._deleUrlUtilsFor(\"hashSearch\");\n    this.urlUtils.hashSearch = newValue;\n  }\n\n\n\n  get hashParams(){\n    return this.urlUtils.hashParams;\n  }\n  set hashParams(newValue){\n    this._deleUrlUtilsFor(\"hashParams\");\n    this.urlUtils.hashParams = newValue;\n  }\n\n\n  get hashUrlUtils(){\n    return this.urlUtils.hashUrlUtils;\n  }\n  set hashUrlUtils(newValue){\n    this._deleUrlUtilsFor(\"hashUrlUtils\");\n    this.urlUtils.hashUrlUtils = newValue;\n  }\n\n\n  get params(){\n    return this.urlUtils.params;\n  }\n\n\n  /**\n   * 清除与 util 相关的子 util\n   * @param util : string\n   */\n  _deleUrlUtilsFor(util){\n    let deleUtils = this.deleUrlUtilsMap[util];\n    if (deleUtils){\n      deleUtils.forEach((deleKey)=>{\n        this.urlUtils[deleKey] = undefined;\n      });\n    }\n  }\n\n\n  /**\n   * 接口1:\n   * addSearchParams(key,value)\n   * 给查询参数添加新的成员，并返回添加后的查询参数对象\n   * @param key : string   添加的key\n   * @param value : any    添加的值\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口2:\n   * 追加查询参数params，并返回追加后的查询参数对象\n   * addSearchParams(params)\n   * @param params : Object   添加的params对象\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口3:\n   * addSearchParams()\n   * 获取添加的查询参数\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   */\n  addSearchParams(key,value){\n\n    if (key){\n\n      let addSearchParams = this.urlUtils.addSearchParams || {};\n      if (typeof key == \"object\"){\n        Object.assign(addSearchParams,key);\n      } else {\n        addSearchParams[key] = value;\n      }\n      this._deleUrlUtilsFor(\"addSearchParams\");\n      this.urlUtils.addSearchParams = addSearchParams;\n\n    }\n\n    return this.urlUtils.addSearchParams;\n  }\n\n\n\n\n\n\n\n  /**\n   * 接口1:\n   * addHashParams(key,value)\n   * 给hash查询参数添加新的成员，并返回添加后的hash查询参数对象\n   * @param key : string   添加的key\n   * @param value : any    添加的值\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口2:\n   * addHashParams(params)\n   * 追加查询参数params，并返回追加后的查询参数对象\n   * @param params : Object   添加的params对象\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口3:\n   * addHashParams()\n   * 获取添加的hash查询参数\n   * @returns addSearchParams : Object    返回添加后的hash查询参数对象\n   */\n  addHashParams(key,value){\n\n    if  (key){\n\n      let addHashParams = this.urlUtils.addHashParams || {};\n      if (typeof key == \"object\"){\n        Object.assign(addHashParams,key);\n      } else {\n        addHashParams[key] = value;\n      }\n      this._deleUrlUtilsFor(\"addHashParams\");\n      this.urlUtils.addHashParams = addHashParams;\n    }\n\n    return this.urlUtils.addHashParams;\n\n  }\n\n\n\n\n\n}\n\n\n\n//ByURL：结束\n\n\n\n\n\n\n\n\n\n// 普通解析与字符串化：开始\n\n\n//不依赖 URL 和 URLSearchParams 的解析：开始\n\n\n/**\n *默认的 paramsPropParse ; 用JSON解析参数的属性\n */\nfunction _paramsPropJSONParse(value) {\n  return JSON.correctParse(value);\n}\n\n\n\n/**\n *默认的 paramsPropStringify ；用JSON序列化参数的属性\n */\nfunction _paramsPropJSONStringify(value,key,params) {\n    if (typeof value == \"object\"){\n      value = JSON.stringify(value);\n    }\n    return value;\n}\n\n\n\n\n/**\n * 把url字符串解析成 UrlUtils 对象； UrlUtils 对象是包含所有 url 组件的对象；\n * 注意：\n * - 本方法中没有依赖 URL 类型进行解析，使用是纯粹的字符中解析，所以可以在不支持 URL 类型的环境下使用，比如：小程序；\n * - 当 searchParams 和 hashParams 中的的属性值是 JSON 字符串时，会自动转对象\n *\n * @param urlStr : string   必选；url字符串，可以是无效的或者不完整的url字符串\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n * @returns urlUtils : UrlUtils\n *\n 返回的对象 UrlUtils 对象包含以下属性\n href:string,    //包含完整 URL 的 DOMString。\n url:string,   //不包含search和hase 的url\n origin:string,  //返回一个包含协议名、域名和端口号的 DOMString。\n protocol:string,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n host:string,  //包含 URL 域名，':'，和端口号的 DOMString。\n hostname:string,  //包含 URL 域名的 DOMString。\n port:string,    //包含 URL 端口号的 DOMString。\n pathname:string,  //URL 的路径的字符串。\n pathList:Array,  //url的路径名列表\n absPath:boolean, //pathname 是否是经对路径\n search:string,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。\n searchParams:Object,  //查询参数search的对象形式\n hash:string, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。\n hashSearch:string, // 哈唏hash中的查询字符串\n hashParams:Object,   //哈唏hash中的参数\n hashUrlUtils:UrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils\n params:Object,    //url中所有的参数，包括 searchParams 和 hashParams\n *\n */\nexport function parseUrl(urlStr,paramsPropParse,paramsPropStringify){\n  var protocolRegExp;\n  protocolRegExp = /^\\w+(?=:\\/\\/)/;\n  var hostRegExp = /([^./:\\s]+(?:\\.[^./:\\s]+)+)(?::(\\d+))?|([^./:\\s]+)(?::(\\d+))/;\n\n  if (!paramsPropParse){\n    paramsPropParse = _paramsPropJSONParse;\n  }\n\n\n  if (!paramsPropStringify){\n    paramsPropStringify = _paramsPropJSONStringify;\n  }\n\n  var href = urlStr.trim();\n  var {url,search,hash} = splitURLByQueryString(href);\n\n\n  //解析协间 protocol\n  if (url){\n    var hostUrl = url;\n    var protoList = url.split(\"://\");\n    if (protoList.length > 1){\n      var protocol = protoList[0];\n      hostUrl = protoList[1];\n    }\n  }\n\n\n\n\n\n  //解析域名和路径 host hostname port pathname  pathList absPath\n  if (hostUrl){\n    var hostList = hostUrl.split(\"/\");\n\n    if (hostList.length > 1){\n\n      var hostItem0 = hostList[0];\n\n      if (/^\\.+$/.test(hostItem0)){ //以 .开关：相对路径\n        var pathname = hostUrl;\n        var pathList = hostList.slice(1);\n        var absPath = false;     //绝对路径的标识设置为假\n      }else if (hostItem0) {\n        var hostRegRes = hostItem0.match(hostRegExp);\n        if (hostRegRes){  //判断通过/分隔后的第一个元素是否符合 host 的格式\n          var host = hostRegRes[0];\n          var hostname = hostRegRes[1] || hostRegRes[3];\n          var port = hostRegRes[2] || hostRegRes[4];\n          pathList = hostList.slice(1);\n          pathname = \"/\" + pathList.join(\"/\");\n          absPath = true;\n        }else {\n          absPath = false;\n          pathList = hostList;\n          pathname = hostUrl;\n        }\n\n      }else { //如果通过/分隔后的第一个元素为空字符串，则说明 hostUrl 是个绝对路径\n        pathList =  hostList.slice(1);\n        pathname = hostUrl;\n        absPath = true;\n      }\n\n\n\n    }else { //如果 hostUrl 中不包含 / ，则说明 hostUrl 是单个域名\n      hostRegRes = hostUrl.match(hostRegExp);\n      if (hostRegRes) {\n        host = hostUrl;\n        hostname = hostRegRes[1];\n        port = hostRegRes[2];\n        absPath = true;\n      }else {\n        pathname = hostUrl;\n        pathList = hostList;\n        absPath = false;\n      }\n\n    }\n\n  }\n\n\n\n\n  //构造 origin\n  if (host) {\n    if (protocol){\n      var origin = protocol + \"://\" + host;\n    } else {\n      origin = host\n    }\n\n  }\n\n\n\n  //解析查询字符串 search  params\n  if (search) {\n    var searchParams = parseQueryString(search,paramsPropParse);\n  }\n\n  //解析哈唏 hash hashParams\n  if (hash){\n    var hashParamStr = hash.replace(/^#+/,\"\");\n    var hashUrlUtils = parseUrl(hashParamStr,paramsPropParse,paramsPropStringify);\n    var hashSearch = hashUrlUtils.search;\n    var hashParams = hashUrlUtils.params;\n  }\n\n\n  //构造 params 对象\n  if  (searchParams || hashParams){\n    var params = {};\n    if (searchParams){\n      Object.assign(params,searchParams);\n    }\n\n    if (hashParams){\n      Object.assign(params,hashParams);\n    }\n  }\n\n\n\n\n  //构造 UrlUtils\n  var urlUtils = {\n    href:href,    //包含完整 URL 的 DOMString。\n    url:url,   //不包含search和hase 的url\n    origin:origin,  //返回一个包含协议名、域名和端口号的 DOMString。\n    protocol:protocol,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n    host:host,  //包含 URL 域名，':'，和端口号的 DOMString。\n    hostname:hostname,  //包含 URL 域名的 DOMString。\n    port:port,    //包含 URL 端口号的 DOMString。\n    pathname:pathname,  //URL 的路径的字符串。\n    pathList:pathList,  //url的路径名列表\n    absPath:absPath, //pathname 是否是经对路径\n    search:search,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。\n    searchParams:searchParams,  //查询参数search的对象形式\n    hash:hash, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。\n    hashSearch:hashSearch, // 哈唏hash中的查询字符串\n    hashParams:hashParams,   //哈唏hash中的参数\n    hashUrlUtils:hashUrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils\n    params:params,    //url中所有的参数，包括 searchParams 和 hashParams\n  };\n\n\n  //精简 UrlUtils 对象，只保留有属性值的属性；\n  var simpUrlUtils = Object.keys(urlUtils).reduce(function (total, key) {\n    var value = urlUtils[key];\n    if (value != null){\n      total[key] = value;\n    }\n    return total;\n  },{});\n\n\n  return simpUrlUtils;\n}\n\n\n\n\n\n\n/**\n * 把  UrlUtils 对象序列化成 url 字符串； UrlUtils 对象是包含所有 url 组件的对象；\n *\n * @param urlUtils : UrlUtils   必选；url字符串，可以是无效的或者不完整的url字符串\n * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n * @returns urlStr : string\n *\n *\n * 注意：\n * - 本方法中没有依赖 URL 类型进行解析，使用是纯粹的字符中解析，所以可以在不支持 URL 类型的环境下使用，比如：小程序；\n * - 当 searchParams 和 hashParams 中的的属性值是 JSON 字符串时，会自动转对象\n * - 对于 urlUtils 中 顶层与 hash 相关的属性 比 urlUtils 属性 hashUrlUtils 中相应的属性优先级更高；\n * - 对于 urlUtils 中有冲突的url组件属性，则以组件粒度较细者优先；如：如果 urlUtils 中同时设置了 href 和 host 属性，则 host 属性值会取代 href 属性中的 host 部分；\n *\n *\n *\n *\n * urlUtils 对象可配置的属性包括 parseUrl 方法能解析出的所有属性，此还，还包括侯个新的属性：addSearch、addSearchParams、addHashSearch、addHashParams ；\n * urlUtils 中可配置的属性如下：\n addSearch: string   //另外追加的 search 字符串，该属性优先级低于addSearchParams\n addSearchParams: Object  // 另外追加的 search 对象，该属性优先级高于 addSearch\n addHashSearch: string   //另外追加的 hashSearch 字符串，该属性优先级低于 addHashParams\n addHashParams: Object  // 另外追加的 hashSearch 对象，该属性优先级高于 addHashSearch\n\n href:string,    //包含完整 URL 的 DOMString。\n url:string,   //不包含search和hase 的url\n origin:string,  //返回一个包含协议名、域名和端口号的 DOMString。\n protocol:string,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n host:string,  //包含 URL 域名，':'，和端口号的 DOMString。\n hostname:string,  //包含 URL 域名的 DOMString。\n port:string,    //包含 URL 端口号的 DOMString。\n pathname:string,  //URL 的路径的字符串。\n pathList:Array,  //url的路径名列表\n absPath:boolean, //pathname 是否是经对路径\n search:string,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。该属性的优先级低于 searchParams\n searchParams:Object,  //查询参数search的对象形式；如果没有设置该属性，则默认取 在 params 中 但不在 hashParams 中的所有属性组成的对象来代替； 该属性的优先级高于 search\n hash:string, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。该属性会 覆盖 hashUrlUtils.href 属性；\n hashSearch:string, // 哈唏hash中的查询字符串； 该属性的优先级低于 hashParams\n hashParams:Object,   //哈唏hash中的参数；如果没有设置该属性 且 设置了 searchParams，则默认取 在 params 中 但不在 searchParams 中的所有属性组成的对象来代替； 该属性的优先级高于 hashSearch； hashSearch 和 hashParams 之合 会 覆盖 hashUrlUtils.searchParams 属性；\n hashUrlUtils:UrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils； 顶层中的 hashSearch 和 hashParams 之合 会 覆盖 hashUrlUtils.searchParams 属性；\n params:Object,    //url的参数；\n *\n *\n */\nexport function stringifyUrl(urlUtils,paramsPropStringify,paramsPropParse){\n  var urlStr = \"\";\n\n  if (!paramsPropStringify){\n    paramsPropStringify = _paramsPropJSONStringify;\n  }\n\n\n\n  if (!paramsPropParse){\n    paramsPropParse = _paramsPropJSONParse;\n  }\n\n\n  var href = urlUtils.href || urlUtils.url || urlUtils.origin;\n  if (href){\n    var hrefUrlUtils = parseUrl(href,paramsPropParse,paramsPropStringify);\n    urlUtils = Object.assign(hrefUrlUtils,urlUtils)\n  }\n\n\n  //拼接协意 protocol\n  var protocol = urlUtils.protocol;\n  if (protocol){\n    urlStr = protocol + \"://\";\n  }\n\n  //拼接域名 host\n  var host = urlUtils.host;\n  var hostname = urlUtils.hostname;\n  if  (hostname){\n    host = hostname;\n    var port = urlUtils.port;\n    if (port){\n      host += \":\" + port;\n    }\n  }\n\n\n  if (host){\n    urlStr += host ;\n  }\n\n\n\n  //拼接路径 pathname\n  var pathname = urlUtils.pathname;\n  var pathList = urlUtils.pathList;\n  var absPath = urlUtils.absPath;\n  if (!pathname && pathList) {\n    pathname = \"/\" + pathList.join(\"/\");\n  }\n  if (pathname){\n    pathname = pathname.trim();\n    if (urlStr || absPath === true) {\n      pathname = pathname.replace(/^[./]*/,\"/\");\n    }\n    urlStr += pathname;\n  }\n\n\n\n\n\n\n\n\n  //追加查询参数 addSearch 或 addSearchParams\n  var search = urlUtils.search;\n  var searchParams = urlUtils.searchParams;\n\n  if (!searchParams && search){\n    searchParams = parseQueryString(search,paramsPropParse);\n  }\n\n  if (searchParams){\n    var mergedSearchParams = Object.assign({},searchParams);\n  }\n\n  var params = urlUtils.params;\n  if(!searchParams && params){\n    var excludeParams = urlUtils.hashParams || {};\n    var excludeKeys = Object.keys(excludeParams)\n    searchParams = params.filterProperty(function (key) {\n      return !excludeKeys.includes(key);\n    });\n\n    if (searchParams.noKeys){\n      searchParams = null;\n    }\n  }\n\n  var addSearchParams = urlUtils.addSearchParams;\n  var addSearch = urlUtils.addSearch;\n  if (!addSearchParams && addSearch){\n    addSearchParams = parseQueryString(addSearch,paramsPropParse);\n  }\n\n  if (searchParams && addSearchParams){\n    searchParams = Object.assign({},searchParams,addSearchParams);\n  }else if (addSearchParams){\n    searchParams = addSearchParams;\n  }\n\n\n\n\n  //拼接路径 search\n  if (searchParams && !searchParams.noKeys){\n    search = queryStringify(searchParams,true,paramsPropStringify);\n  }else {\n    search = null;\n  }\n\n  if (search){\n    urlStr += search;\n  }\n\n\n\n  //追加哈唏参数 addHashSearch 或 addHashParams\n  var hashSearch = urlUtils.hashSearch;\n  var hashParams = urlUtils.hashParams;\n\n  if (!hashParams && hashSearch){\n    hashParams = parseQueryString(hashSearch,paramsPropParse);\n  }\n\n  if(!hashParams && mergedSearchParams && params){\n    excludeKeys = Object.keys(mergedSearchParams)\n    hashParams = params.filterProperty(function (key) {\n      return !excludeKeys.includes(key);\n    });\n\n    if (hashParams.noKeys){\n      hashParams = null;\n    }\n  }\n\n\n\n  var addHashParams = urlUtils.addHashParams;\n  var addHashSearch = urlUtils.addHashSearch;\n  if (!addHashParams && addHashSearch){\n    addHashParams = parseQueryString(addHashSearch,paramsPropParse);\n  }\n\n  if (hashParams && addHashParams){\n    hashParams = Object.assign({},hashParams,addHashParams);\n  }else if (addHashParams){\n    hashParams = addHashParams;\n  }\n\n\n\n\n  //拼接哈唏 hash\n  var hash = urlUtils.hash;\n  var hashUrlUtils = urlUtils.hashUrlUtils;\n\n\n  if (hashUrlUtils || hashParams) {\n\n    if (hashUrlUtils){\n      hashUrlUtils = Object.assign({},hashUrlUtils)\n    }else {\n      hashUrlUtils = {};\n    }\n\n    if (hash){\n      hash = hash.replace(/^#+/,\"\");\n      hashUrlUtils.href = hash;\n    }\n\n    if (hashParams) {\n      hashUrlUtils.searchParams = hashParams;\n    }\n\n    if (!hashUrlUtils.noKeys){\n      hash = stringifyUrl(hashUrlUtils,paramsPropStringify,paramsPropParse);\n    }\n\n  }\n\n\n  if (hash) {\n    hash = hash.replace(/^#*/,\"#\");\n    urlStr += hash;\n  }\n\n\n  return urlStr;\n}\n\n\n\n\n\n\n\n\n/**\n * 把url字符串分隔成 url、查询字符串search 和 哈唏hash 三段字符串；\n * @param urlStr\n * @returns {url: string, search: string, hash: string}   其中，url字符串不包括 search 和 hash ；并且 search 开头有 \"?\", hash 开头有 \"#\"\n *\n * 本方法法之所以没用正则 和 URL 等，目的是为了防止 urlStr 中 有 多个 ## 等不规范情况 和 让该方法具有通用性\n */\nexport function splitURLByQueryString(urlStr) {\n\n  var preIndex = urlStr.indexOf(\"?\");\n  var anrIndex = urlStr.indexOf(\"#\");\n\n  var urlQS = urlStr;\n  var hash = undefined;\n  if (anrIndex >= 0){\n    urlQS = urlStr.substring(0,anrIndex);\n    hash = urlStr.substring(anrIndex);\n  }\n\n  var search = undefined;\n  var url = urlQS;\n  if (preIndex >= 0) {\n    search = urlQS.substring(preIndex);\n    url = urlQS.substring(0,preIndex);\n  }\n\n  return {url,search,hash};\n}\n\n\n\n\n\n\n\n\n\n\n\n// JSON解析与字符串化：开始\n\n\n\n/**\n * 把对象 obj 用JSON的方式格式化成 URL 的参数格式；\n * @param obj : Object   必选；被格式化的对象\n * @param queryPrefix ? : boolean    可选；默认值：false; 是否带URL的查询字符串前缀 ?\n * @returns 格式化后的 URL 的参数格式\n *\n *\n * 说明\n * 当URL参数对象 obj 不只有一层属性（如果obj的属性也是对象）时，URL的查询字符串就很很表示了；本方法就是用来解决这个问题；\n * 被本方法格式化的URL查询字符串，需要用 JSON 的 parseQueryString 方法来解析成对象；\n *\n */\nexport function JSONQueryStringify(obj,queryPrefix) {\n  return queryStringify(obj,queryPrefix,_paramsPropJSONStringify);\n}\n\n\n\n/**\n * 把 通过 JSONQueryStringify 格式化后的查询字符串 queryString 解析成 对象；\n * @param queryString : string   必选；被格式化的对象\n * @returns 解析后的对象\n *\n */\nexport function parseJSONQueryString(queryString) {\n  return parseQueryString(queryString,_paramsPropJSONParse);\n}\n\n\n\n\n\n\n/**\n * parseJSONQueryStrObjProperty(queryObj)\n * 把 通过 JSONQueryStringify 格式化后的查询字符串的对象的属性 解析成 真实的值；\n * @param queryObj : Object   必选；查询字符串对象; 一般是经过初次查询字符串的解析(比如：parseQueryString)成的对象；\n * @returns 解析后的对象\n *\n */\nexport function parseJSONQueryStrObjProperty(queryObj) {\n  return Object.entries(queryObj).reduce(function (total, kvList) {\n    let key = kvList[0];\n    let jsonStr = decodeURIComponent(kvList[1]);\n    total[key] = JSON.correctParse(kvList[1]);\n\n    return total;\n  }, {});\n\n}\n\n\n\n// JSON解析与字符串化：结束\n\n\n\n\n//查询字符串：开始\n\n\n/**\n * 接口1\n * queryStringify(params,queryPrefix,paramsPropStringify)\n * @param params : Object    被序列化的参数对象\n * @param queryPrefix ? : boolean   可选；默认值：false ; 是否带有 ？ 前缀\n * @param paramsPropStringify ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n * @returns string   序列化后的url查询字符串\n *\n *\n *\n *\n * 接口2:\n * queryStringify(params,paramsPropStringify)\n * @param params : Object    被序列化的参数对象\n * @param paramsPropStringify ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n * @returns string   序列化后的url查询字符串\n */\nexport function queryStringify(params,queryPrefix,paramsPropStringify) {\n  if (arguments.length == 2 && typeof queryPrefix == \"function\"){\n    paramsPropStringify = queryPrefix;\n    queryPrefix = undefined;\n  }\n\n\n  if (!paramsPropStringify){\n    paramsPropStringify = function (value) {\n      return value;\n    };\n  }\n\n\n  var paramList = Object.entries(params).map(function (kvArr, index, array) {\n    var key = kvArr[0];\n    var keyStr = encodeURIComponent(key);\n\n    var value = kvArr[1];\n    value = paramsPropStringify.call(params,value,key,params);\n    var valueStr = encodeURIComponent(value);\n\n    return keyStr + \"=\" + valueStr;\n  });\n\n  var queryString = paramList.join(\"&\");\n\n  if (queryPrefix){\n    queryString = \"?\" + queryString;\n  }\n\n  return queryString;\n\n}\n\n\n/**\n * parseQueryString(queryString,paramsPropParse)\n * @param queryString : string    被解析的查询字符串；\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；对 value 进行转换\n * @returns Object   解析后的对象\n */\nexport  function parseQueryString(queryString,paramsPropParse) {\n  if (!paramsPropParse){\n    paramsPropParse = function (value) {\n      return value;\n    };\n  }\n\n\n  var preIndex = queryString.indexOf(\"?\");\n  var anrIndex = queryString.indexOf(\"#\");\n\n  if (anrIndex == -1){\n    anrIndex = undefined;\n  }\n  queryString = queryString.substring(preIndex + 1,anrIndex);\n\n  queryString = queryString.replace(/^\\?/,\"\");\n  var kvStrList = queryString.split(\"&\");\n\n  return kvStrList.reduce(function (obj, kvStr) {\n    var kvList = kvStr.split(\"=\");\n    var key = decodeURIComponent(kvList[0]);\n    var value = decodeURIComponent(kvList[1]);\n    value = paramsPropParse(value,key,queryString);\n    obj[key] = value;\n\n    return obj;\n  },{});\n}\n\n\n\n\n//查询字符串：结束\n\n\n\n\n\n\n\n//类查询字符串：开始\n\n\n/**\n * similarQueryStringify(params,separOpts)\n * 将对类转化成 类似查询字符串格式的字符串\n *\n * @param params : Object    被序列化的参数对象\n * @param separOpts ? : {prop,kv,map}   可选；分隔符 和 值解析回调 的配置选项；\n * separOpts.prop ?: string     可选；默认值：\"&\"；属性与属性之间的分隔符；\n * separOpts.kv ?: string     可选；默认值：\"=\"；key 和 value 之间的分隔符；\n * separOpts.map  ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n *\n * @returns string   序列化后的类查询字符串\n */\nexport function similarQueryStringify(params,separOpts) {\n\n  var {prop:propSeparator,kv:kvSeparator,map:paramsPropStringify} = separOpts || {};\n\n  if (propSeparator == null){\n    propSeparator = \"&\";\n  }\n\n  if (kvSeparator == null){\n    kvSeparator = \"=\";\n  }\n\n  if (!paramsPropStringify){\n    paramsPropStringify = function (value) {\n      return value;\n    };\n  }\n\n\n  var paramList = Object.entries(params).map(function (kvArr, index, array) {\n    var key = kvArr[0];\n\n    var value = kvArr[1];\n    value = paramsPropStringify.call(params,value,key,params);\n\n    return key + kvSeparator + value;\n  });\n\n  var queryString = paramList.join(propSeparator);\n\n  return queryString;\n}\n\n\n\n/**\n * parseSimilarQueryString(queryString,separOpts)\n * 解析 类似查询字符串格式的字符串\n *\n * @param queryString : string    被解析的类似查询字符串格式的字符串；\n * @param separOpts ? : {prop,kv,map}   可选；分隔符 和 值解析回调 的配置选项；\n * separOpts.prop ?: string     可选；默认值：\"&\"；属性与属性之间的分隔符；\n * separOpts.kv ?: string     可选；默认值：\"=\"；key 和 value 之间的分隔符；\n * separOpts.map  ? : (value,key,queryString)=> value    可选；对 value 进行转换\n *\n * @returns Object   解析后的对象\n */\nexport function parseSimilarQueryString(queryString,separOpts) {\n\n  var {prop:propSeparator,kv:kvSeparator,map:paramsPropParse} = separOpts || {};\n\n  if (propSeparator == null){\n    propSeparator = \"&\";\n  }\n\n  if (kvSeparator == null){\n    kvSeparator = \"=\";\n  }\n\n  if (!paramsPropParse){\n    paramsPropParse = function (value) {\n      return value;\n    };\n  }\n\n\n  var kvStrList = queryString.split(propSeparator);\n\n  return kvStrList.reduce(function (obj, kvStr) {\n    var kvList = kvStr.split(kvSeparator);\n    var key = kvList[0];\n    var value = kvList[1];\n    value = paramsPropParse(value,key,queryString);\n    obj[key] = value;\n\n    return obj;\n  },{});\n}\n\n\n\n//类查询字符串：结束\n\n\n\n\n\n\n//不依赖 URL 和 URLSearchParams 的解析：结束\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 普通解析与字符串化：结束\n\n\n\n\n\n\n\n\n\n\n\n\n// Object扩展：开始\n\n\nlet objectPropertyDescriptors = {\n\n\n\n  //URL相关：开始\n\n\n  /**\n   * toJSONqueryStringify(queryPrefix)\n   * 把当前对象 用JSON的方式格式化成 URL 的参数格式\n   * @param queryPrefix ? : boolean    可选；默认值：false; 是否带URL的查询字符串前缀 ?\n   * @returns 格式化后的 URL 的参数格式\n   *\n   * 说明\n   * 本方法是通过 JSONQueryStringify 方法进行格式化的\n   */\n  toJSONqueryStringify: {\n    enumerable: false,\n    value: function (queryPrefix) {\n      return JSONQueryStringify(this,queryPrefix);\n    }\n  },\n\n\n  //URL相关：结束\n\n\n};\n\n\n\n\nObject.defineProperties(Object.prototype, objectPropertyDescriptors);\n\n\n// Object扩展：结束\n\n\n\n// String扩展：开始\n\nlet stringPropertyDescriptors = {\n\n  /**\n   * 获取当前字符串经过 parseJSONQueryString 解析成的 对象；\n   *\n   * 说明：\n   * 本方法是通过 parseJSONQueryString 方法进行解析的；\n   */\n  urlJSONQueryObj:{\n    get:function () {\n     return parseJSONQueryString(this);\n    }\n  },\n};\n\n\n\nObject.defineProperties(String.prototype,stringPropertyDescriptors);\n\n\n// String扩展：结束\n","import {queryStringify,parseQueryString} from \"./ByURL\"\n\n\n/**\n * ByURLSearchParams 此类的功能与 URLSearchParams 一样，封装此类的目的是为在不支持 URLSearchParams 的环境中替代 URLSearchParams\n * 注意：此类的包含 URLSearchParams 的所有接口，所以在不支持 URLSearchParams 的环境中，此类可完全替代 URLSearchParams 类；\n */\nexport class ByURLSearchParams {\n\n  queryPrefix=false;  //在获取查询字符串时，是否要带前缀 ?\n  constructor(initSearch,paramsPropReplacer){\n    this.paramsPropReplacer = paramsPropReplacer;\n    this.initSearch = initSearch;\n  }\n\n\n\n\n\n  /**\n   * 原始输入的 search\n   * @param newValue\n   */\n  set initSearch(newValue){\n    this._initSearch = newValue;\n    if (newValue){\n      var params = newValue;\n      if (typeof newValue != \"object\"){\n        params = parseQueryString(newValue,this.paramsPropReplacer);\n      }\n      this.params = params;\n    }\n  }\n\n  get initSearch(){\n    return this._initSearch;\n  }\n\n\n\n\n\n  set params(newValue){\n    this._params = newValue;\n  }\n\n  get params(){\n    if (!this._params) {\n      this._params = {};\n    }\n    return this._params;\n  }\n\n\n  get search(){\n    return queryStringify(this.params,this.queryPrefix,this.paramsPropReplacer);\n  }\n\n  set search(newValue){\n    this.initSearch = newValue;\n  }\n\n\n\n\n  toString(queryPrefix = this.queryPrefix,paramsPropReplacer = this.paramsPropReplacer){\n    return queryStringify(this.params,queryPrefix,paramsPropReplacer);\n  }\n\n\n  append(name, value){\n    this.params[name] = value;\n  }\n\n  delete(name){\n    delete this.params[name];\n  }\n\n  entries(){\n    return Object.entries(this.params);\n  }\n\n  forEach(callback,thisArg){\n    this.entries().forEach(function (kvList) {\n      callback.call(thisArg,kvList[1],kvList[0],this);\n    }.apply,this);\n  }\n\n\n  get(name){\n    return this.params[name];\n  }\n\n  getAll(name){\n    let value = this.params[name];\n    return [value];\n  }\n\n  has(name){\n    return this.params.hasOwnProperty(name);\n  }\n\n  keys(){\n    return Object.keys(this.params);\n  }\n\n  set(name, value){\n    this.params[name] = value;\n  }\n\n  sort(){\n\n  }\n\n\n  values(){\n    return Object.values(this.params);\n  }\n\n\n\n\n\n}\n","import \"es-expand\"\n\nexport * from \"./ByURL\"\nexport * from \"./ByURLSearchParams\"\n\n\n/**\n * 通过把值转换成JSON字符来判断是否相等\n * @param value1 : any\n * @param value2 : any\n * @returns boolean\n *\n *\n * 注意：\n * - 方法能用于判断对象的内容是否相等，相等的条件是：这2个对象拥有相同的属性 和 属性值，且属性及属性的属性 的添加顺序是一致的；即：当两个对象的拥有相同的属性和属性值时，如果属性的定义的顺序不同，该方法会返回 false；\n * - 该方法依赖于 JSON.stringify() 的逻辑；\n */\nexport function isEqualOfJSON(value1, value2) {\n  return JSON.stringify(value1) == JSON.stringify(value2);\n}\n\n\n\n\n  //遍历优化：开始\n\n\n/**\n * multipleLoop(option)=> stopLoop()\n * 多次遍历、分批循环；可以把一个大遍历分成若干个小遍历来完成；\n * @param option : {loopCall,complete,stepComplete,thisValue,total,step,delay}   选项对象\n * @property option.loopCall : (index,stepCount,total)=>stopInfo : any  必选；每次循环的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n * @property option.stepComplete ？ : (index,stepCount,total)=>stopInfo : any  可选；每批循环完成时的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n * @property option.complete ？: (stopInfo,index,stepCount,total)=>Void  可选；循环结束时的回调函数； 入参 stopInfo : any 停止循环遍历时停止信息；入参  index : number  表示最后一次循环的 index，如果值为-1 表示没有进行过循环值终止了；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数；\n * @property option.thisValue ? : any   loopCall、complete、stepComplete 回调函数的this的值；\n * @property option.total ? : number   可选；默认值：无穷大 Number.POSITIVE_INFINITY ; 设置总数循环次数；\n * @property option.step ? : number    可选； 默认值： 50 ； 设置每次遍历的循环次数；\n * @property option.delay ? : Timestamp   可选；默认值 ：0 ； 设置再次遍历的间隔时间；\n * @returns stopLoop : (stopInfo)=>Void    停止循环的函数；调用该函数，会终止正在进行的循环； 入参 stopInfo : any 停止循环的相关信息\n */\n\n\nexport function multipleLoop({loopCall,complete,stepComplete,thisValue,total=Number.POSITIVE_INFINITY,step = 50,delay = 0}) {\n\n\n  let index = 0;\n  let stepCount = 0;   //已经完成了多少批遍历\n\n\n  /**\n   * 设置是否要停止循环；\n   *\n   * 之所以通过函数来设置，而不是直接给stop变量赋值，是因为：\n   * - 确定 结束循环时 只调用一次  complete ；\n   */\n  let stop = false;    //停止循环的开关；表示是否终止循环；\n  function setStop(newValue){\n    if (newValue){\n      stop = newValue;\n\n      if (complete) {\n        complete.call(thisValue,stop,index,stepCount,total);\n      }\n    }\n  }\n\n\n  /**\n   * 是否需要循环；\n   * @returns boolean\n   *\n   * 之所以定义成函数形式，而不定义成变量，是因为：\n   * - 减少代码冗余；\n   * - 确定 结束循环时 只调用一次  complete ；\n   */\n  function loop(){\n    let needLoop = index < total;\n\n    if (!needLoop && complete) {\n      complete.call(thisValue,false,index-1,stepCount,total);\n    }\n    return needLoop\n  }\n\n\n  let timeoutId = null;\n\n\n\n\n\n\n  /**\n   * 自调用单次循环\n   */\n  function atuoSingleLoop() {\n    stepCount++;\n\n    let singleTotal = Math.min(index + step,total);\n\n    function singleLoop(){return index < singleTotal}\n\n    while (singleLoop() && !stop){\n      setStop(loopCall.call(thisValue,index,stepCount,total));\n      index++;\n    }\n\n    if (stepComplete){\n      setStop(stepComplete.call(thisValue,index-1,stepCount,total));\n    }\n\n\n    if (loop() && !stop){\n      timeoutId = setTimeout(atuoSingleLoop,delay);\n    }\n  }\n\n\n  /**\n   * 停止循环\n   */\n  function stopLoop(stopInfo) {\n    if (!stopInfo){\n      stopInfo = true;\n    }\n\n    clearTimeout(timeoutId);\n    setStop(stopInfo);\n  }\n\n\n\n  if (loop()){ //开始循环\n    atuoSingleLoop();\n  }\n\n\n  return stopLoop;\n}\n\n\nlet arrayPropertyDescriptors = {\n\n\n  /**\n   * multipleLoop(option)=> stopLoop()\n   * 多次遍历、分批循环；可以把一个大遍历分成若干个小遍历来完成；\n   * @param option : {loopCall,complete,stepComplete,thisValue,step,delay}   选项对象\n   * @property option.loopCall : (currentValue,index,stepCount,arr)=>stopInfo : any  必选；每次循环的回调函数；入参 currentValue : Item  当前index对应数组元素； 入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr:Array 当前被循环的数组； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n   * @property option.stepComplete ？ : (index,stepCount,arr)=>stopInfo : any  可选；每批循环完成时的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr: Array 被循环的数组，即当前数组； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n   * @property option.complete ？: (stopInfo,index,stepCount,arr)=>Void  可选；循环结束时的回调函数；入参 stopInfo : any 停止循环遍历时停止信息；入参  index : number  表示最后一次循环的 index，如果值为-1 表示没有进行过循环值终止了；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr: Array 被循环的数组，即当前数组；\n   * @property option.thisValue ? : any   可选；默认值：当前数组； loopCall、complete、stepComplete  回调函数的this的值；\n   * @property option.step ? : number    可选； 默认值： 50 ； 设置每次遍历的循环次数；\n   * @property option.delay ? : Timestamp   可选；默认值 ：0 ； 设置再次遍历的间隔时间；\n   * @returns stopLoop : (stopInfo)=>Void    停止循环的函数；调用该函数，会终止正在进行的循环； 入参 stopInfo : any 停止循环的相关信息\n   */\n  multipleLoop: {\n    enumerable: false,\n    value: function ({loopCall,complete,stepComplete,thisValue,step,delay}) {\n\n      if (thisValue){\n        thisValue = this;\n      }\n\n      let loopOpt = {\n        loopCall:(index,stepCount,total)=> {\n          return loopCall.call(thisValue,this[index],index,stepCount,this);\n        },\n        total:this.length,\n        step:step,\n        delay:delay\n      };\n\n      if (complete){\n        loopOpt.complete = (stopInfo,index,stepCount,total)=>{\n          return complete.call(thisValue,stopInfo,index,stepCount,this);\n        };\n      }\n\n      if (stepComplete){\n        loopOpt.stepComplete = (index,stepCount,total)=>{\n          return stepComplete.call(thisValue,index,stepCount,this);\n        };\n      }\n\n\n      return multipleLoop(loopOpt);\n    }\n  }\n\n};\n\n  Object.defineProperties(Array.prototype, arrayPropertyDescriptors);\n\n\n\n  //遍历优化：结束\n\n\n\n\n\n\n/**\n * safelyIterate(iterable,operation, thisValue)\n * 对 iterable  进行安全的迭代；与 for...of 的区别是：safelyIterate 能保证会迭代过程不会受 operation 中的行为的影响从而迭代每一个元素；\n * @param iterable : Iterable   必选； 可迭代的对象；\n * @param operation : (currentValue,currentIndex,iterable)=>boolean | undefined     执行的操作， 该函数的返回值表示是否要过滤出该元素\n * @param thisValue ? : any   可选，默认值是 iterable ；操作 operation 的 this 值\n * @returns [Item]  返回被 operation 过滤出的元素\n *\n *\n * operation(currentValue,currentIndex,iterable)=>boolean | undefined\n * @param currentValue : any   调用 operation 时的元素的值；\n * @param currentIndex : number     currentValue 在原始 iterable 中 对应的迭代索引值；\n * @param iterable : Iterable   被迭代的 iterable ；\n * @returns boolean | undefined  表示是否要过滤出 currentValue ；\n *\n */\nexport function safelyIterate(iterable,operation, thisValue) {\n\n  if (thisValue == undefined) {\n    thisValue = iterable;\n  }\n\n  let arrayCopy = [];\n\n  for (let value of iterable){\n    arrayCopy.push(value);\n  }\n\n  let filterItem = arrayCopy.filter(function (currentValue) {\n    let currentIndex = this.indexOf(currentValue);\n    operation.call(thisValue, currentValue, currentIndex, iterable);\n  },arrayCopy);\n\n\n  return filterItem;\n\n}\n\n\n\n\n\n\n//类型：开始\n\n\n/**\n * 获取 inst 的类型\n * @param inst : any\n * @returns Type    inst 的类型\n *\n *\n *\n * 注意：\n * 本方法返回的结果如下：\n * undefined ：undefined\n * null ： null\n * 其它任何类型的实例  : 返回该实例的构造函数  或 包装对象的构造函数\n *\n */\nexport function getTypeOf(inst) {\n  var typeInfo = inst;\n  if (inst != null){\n    typeInfo = inst.constructor;\n  }\n\n  return typeInfo;\n\n}\n\n\n\n\n\n/**\n * 获取 inst 的类型字符串\n * @param inst : any\n * @returns string    inst 的类型字符串\n *\n *\n *\n * 注意：\n * 本方法返回的结果如下：\n * undefined ：\"undefined\"\n * null ： \"null\"\n * 其它任何类型的实例  : 返回该实例的构造函数  或 包装对象的构造函数 的函数名字\n *\n */\nexport function getTypeStringOf(inst) {\n\n  switch (inst){\n    case undefined:{\n      var typeStr = \"undefined\";\n      break;\n    }\n\n    case null:{\n      typeStr = \"null\";\n      break;\n    }\n\n    default:{\n      typeStr = inst.constructor.name;\n    }\n  }\n\n  return typeStr;\n\n}\n\n\n\n//类型：结束\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 定义可监听的属性\n *\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param prop : string   必选；要定义的属性的名称。\n * @param options ?: {ready ?:string,noEvent ?:boolean,event ?:string,newValueKey ?:string,oldValueKey ?:string,getDefault ?:(thisValue)=>PropValue}     可选；配置选项；各个选项的说明如下；\n * @property  ready ?:string    可选；默认值：prop + \"Ready\" ；ready属性的属性名字；\n * @property  noEvent ?:boolean    可选；默认值：false ；是否要给 prop 属性增加值变更事件；\n * @property  event ?:string    可选；默认值：prop +  \"Change\" ；prop变更事件的名字；\n * @property  newValueKey ?:string    可选；默认值：\"value\" ；prop变更事件的事件对象中保存新值的属性名字；\n * @property  oldValueKey ?:string    可选；默认值：\"oldValue\" ；prop变更事件的事件对象中保存旧值的属性名字；\n * @property  getDefault ?:(thisValue)=>PropValue    可选；在获取 prop 属性的值时，如果 prop 属性的值不存在 ，则会通过 该函数获取默认的值；\n *\n *\n * @returns obj : Object  被传递给函数的对象。\n */\nexport function defineListenableProperty(obj,prop,options){\n  let {ready:readyName = prop + \"Ready\",noEvent,event:eventName = prop +  \"Change\",newValueKey = \"value\",oldValueKey = \"oldValue\",getDefault} = options || {};\n  let priReadyName = \"_\" + readyName;\n  let priProp = \"_\" + prop;\n\n\n\n  /**\n   * 给 obj 定义 ready 计算属性 ，用于获取客户端的准备状态的promise ，当访问 ready 时，如果 ready 不存在，则会自动创建\n   */\n  Object.defineProperty(obj, readyName, {\n    configurable:true,\n    enumerable:true,\n    get: function () {\n      let _this = this || window;\n      if (!_this[priReadyName]) {\n        let propValue = _this[priProp];\n        if (propValue){\n          _this[priReadyName] = Promise.resolve(propValue);\n        }else {\n          _this[priReadyName] = createControllablePromise();\n        }\n\n      }\n      return _this[priReadyName];\n    },\n    set:function (newValue) {\n      let _this = this || window;\n      _this[priReadyName] = newValue;\n    }\n  });\n\n\n\n  //创建 prop 的 get 方法\n  if (getDefault){\n\n    var propGetter = function () {\n      let _this = this || window;\n      if (!_this[priProp] && getDefault) {\n        _this[prop] = getDefault.call(_this,_this);\n      }\n      return _this[priProp];\n    }\n\n  }else {\n\n    propGetter = function () {\n      let _this = this || window;\n      return _this[priProp];\n    }\n\n  }\n\n\n  //创建 prop 的 set 方法\n\n  if (noEvent){\n\n\n    var propSetter =  function (newValue) {\n      let _this = this || window;\n      if (newValue && newValue !== _this[priProp]) {\n\n\n        let oldValue = _this[priProp];\n        _this[priProp] = newValue;\n\n        let httpReady = _this[readyName];\n        if (httpReady.resolve) {\n          httpReady.resolve(newValue);\n        }else {\n          _this[readyName] = Promise.resolve(newValue);\n        }\n\n      }\n    }\n\n  }else {\n\n\n    propSetter =  function (newValue) {\n      let _this = this || window;\n      if (newValue && newValue !== _this[priProp]) {\n\n\n        let oldValue = _this[priProp];\n        _this[priProp] = newValue;\n\n        let httpReady = _this[readyName];\n        if (httpReady.resolve) {\n          httpReady.resolve(newValue);\n        }else {\n          _this[readyName] = Promise.resolve(newValue);\n        }\n\n        //派发 change 事件\n        let change = new Event(eventName, {\"bubbles\": true});\n        change[newValueKey] = newValue;\n        change[oldValueKey] = oldValue;\n        window.dispatchEvent(change);\n\n\n      }\n    }\n\n  }\n\n\n\n\n\n  /**\n   * 给 obj 对象 添加计算属性 prop ，用以获取 prop\n   *\n   * 注意：\n   * 当 prop 的值变更时，会在 window 上触发该属性的 change 事件\n   * 通过事件的 event[newValueKey] 可能获取改变后的新值\n   * 通过事件的 event[oldValueKey] 可能获取改变前的旧值\n   */\n  Object.defineProperty(obj, prop, {\n    configurable:true,\n    enumerable:true,\n    get: propGetter,\n    set: propSetter\n  });\n\n\n  return obj;\n}\n\n\n\n\n\n/**\n * 批量定义可监听的属性\n *\n * 接口1：defineListenableProperties(obj,propOptions)\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param propOptions : {propName:options}   必选；要定义的属性的配置对象；以该配置对象的属性属性为 要配置的属性的名字，以其值为 本配置的属性的 配置选项\n * @returns obj : Object  被传递给函数的对象。\n *\n *\n * 接口2：defineListenableProperties(obj,propArray,options)\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param propArray : [string]   必选；要在其上定义的属性的名字列表。\n * @param options ?: {ready ?:string,noEvent ?:boolean,event ?:string,newValueKey ?:string,oldValueKey ?:string,getDefault ?:(thisValue)=>PropValue}     可选；配置选项；各个选项的说明如下；\n *\n * @returns obj : Object  被传递给函数的对象。\n */\nexport function defineListenableProperties(obj,props,options){\n\n  var propsObj = props;\n  if (Array.isArray(props)) {\n    propsObj = props.reduce(function (total,propName) {\n      total[propName] = options;\n      return total;\n    },{});\n  }\n\n\n  Object.keys(propsObj).forEach(function (propName) {\n    let propOpts = propsObj[propName];\n    defineListenableProperty(obj,propName,propOpts);\n  });\n\n  return obj;\n}\n\n\n/**\n * defineListenablePropertyGetter(obj, prop, getDefault, asGetter)\n * 定义可监听属性的 getter ； 该方法一般经常用于：一些可监听属性在被定义时，还不能定义 getDefault 选项，只能在稍后某个时刻定义 getDefault 选项，此时便可用此函数来简化重新定义 getter 的操作；\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param prop : string   必选；要定义的属性的名称。\n * @param  getDefault ?:(thisValue)=>PropValue    可选；在获取 prop 属性的值时，如果 prop 属性的值不存在 ，则会通过 该函数获取默认的值；\n * @param asGetter ?: boolean    可选；是否将 getDefault 作为 getter\n */\nexport function defineListenablePropertyGetter(obj, prop, getDefault, asGetter) {\n\n  let priProp = \"_\" + prop;\n\n  if (asGetter) {\n    var propGetter = getDefault;\n  } else if (getDefault) {\n\n    propGetter = function () {\n      let _this = this || window;\n      if (!_this[priProp] && getDefault) {\n        _this[prop] = getDefault.call(_this, _this);\n      }\n      return _this[priProp];\n    }\n\n  } else {\n\n    propGetter = function () {\n      let _this = this || window;\n      return _this[priProp];\n    }\n\n  }\n\n\n  Object.defineProperty(obj, prop, {\n    configurable:true,\n    enumerable:true,\n    get: propGetter\n  });\n}\n\n\n/**\n * 生成唯一的标识符\n * @returns {string}\n */\nexport function createUniqueIdentifier() {\n  var currentDate = new Date();\n  return currentDate.getTime().toString() + Math.random();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * createControllablePromise(executor ?:(resolve, reject)=>Void)\n * 创建外部可控制的改变 Promise 状态 Status 的 Promise 对象；该 Promise 对象在 状态 未完成之前，会有 resolve、reject、clearAdditions 三个方法，当 Promise 的状态完成时，resolve、reject、clearAdditions 这三个方法会自动被删除；其中 clearAdditions 方法是用来 清除 该实例的 resolve、reject、clearAdditions 这三个方法的；\n *\n * @param executor ?: (resolve, reject)=>Void    可选；executor是带有 resolve 和 reject 两个参数的函数 。Promise构造函数执行时立即调用executor 函数，\n * @param statusCompletesImmediately ?: boolean   可选；默认值：true； 该参数表示在 executor 函数中是否会立即（同步）调用 resolve 或 reject ；如果是，则会把 executor 函数变成异步执行，以来避免在执行 clearAdditions 时引用 还未创建的 真实的 promise 实例；\n * @returns Promise   返回一个带有 resolve、reject 和 clearAdditions  三个方法的 Promise 实例，在该实例的 状态没有改变之前 ，通过 resolve 和 reject 这两个方法，可以改变 Promise 的状态，并且会自动调用 clearAdditions 方法来清除  resolve、reject、clearAdditions 这三个方法； clearAdditions 方法用来清除 resolve、reject 和 clearAdditions  这三个方法的\n */\nexport function createControllablePromise(executor,statusCompletesImmediately) {\n  let executorIsvalid = typeof executor == \"function\";\n  if (executorIsvalid && statusCompletesImmediately == undefined){\n    statusCompletesImmediately = true\n  }\n\n\n  var oriFuns = {};\n\n  function clearAdditions() {\n    caPromise.resolve = undefined;\n    caPromise.reject = undefined;\n    caPromise.clearAdditions = undefined;\n  }\n\n  function resolveFun(value) {\n    clearAdditions();\n    oriFuns.resolve(value);\n  }\n\n  function rejectFun(reason) {\n    clearAdditions();\n    oriFuns.reject(reason);\n  }\n\n\n  var caPromise = new Promise(function (resolve, reject) {\n    oriFuns.resolve = resolve;\n    oriFuns.reject = reject;\n    if (executorIsvalid) {\n      if (statusCompletesImmediately) {\n        setTimeout(executor,0,resolveFun, rejectFun);\n      }else {\n        return executor(resolveFun, rejectFun);\n      }\n    }\n  });\n\n  caPromise.clearAdditions = clearAdditions;\n  caPromise.resolve = resolveFun;\n  caPromise.reject = rejectFun;\n\n\n  return caPromise;\n}\n"],"sourceRoot":""}